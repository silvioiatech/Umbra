#!/usr/bin/env python3
"""
F4R2 Integration Test Script
============================

Comprehensive integration test for F4R2 components.
Tests the complete storage workflow from R2Client to SearchIndex.

Usage:
    python f4r2_integration_test.py [--cleanup]
    
Options:
    --cleanup: Remove test data after completion
    
This script performs real operations against your R2 bucket.
Make sure you're using a development/test bucket.
"""

import sys
import json
import hashlib
import argparse
from datetime import datetime, timezone, timedelta
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def run_integration_test(cleanup=False):
    """Run comprehensive F4R2 integration test."""
    
    print("üß™ F4R2 Integration Test")
    print("=" * 50)
    
    try:
        from umbra.storage import (
            ObjectStorage, ManifestManager, SearchIndex,
            ObjectStorageError, ManifestError, SearchIndexError
        )
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    
    # Test data
    test_prefix = f"f4r2_test_{int(datetime.now().timestamp())}"
    test_user_id = 99999
    
    print(f"üè∑Ô∏è  Test prefix: {test_prefix}")
    print(f"üë§ Test user: {test_user_id}")
    
    # Initialize components
    try:
        storage = ObjectStorage()
        manifests = ManifestManager(storage)
        search = SearchIndex(storage)
        
        if not storage.is_available():
            print("‚ùå R2 storage not available - check configuration")
            return False
            
        print("‚úÖ All components initialized")
        
    except Exception as e:
        print(f"‚ùå Component initialization failed: {e}")
        return False
    
    test_keys = []  # Track keys for cleanup
    
    try:
        # Test 1: Basic Object Storage
        print(\"\\nüìÑ Test 1: Object Storage Operations")
        print("-" * 30)
        
        # Store text file
        text_content = f\"\"\"F4R2 Integration Test Document\n\nTest ID: {test_prefix}\nCreated: {datetime.now(timezone.utc).isoformat()}\n\nThis is a comprehensive test of F4R2 object storage capabilities.\nThe test covers all major operations including storage, manifests, and search.\n\nFeatures tested:\n- Object storage with metadata\n- JSONL manifest operations\n- Search index functionality\n- Error handling and cleanup\n\"\"\"\n        \n        test_key = f\"{test_prefix}/test_document.txt\"\n        result = storage.put_object(\n            key=test_key,\n            data=text_content,\n            metadata={\"test\": \"true\", \"prefix\": test_prefix}\n        )\n        test_keys.append(test_key)\n        print(f\"‚úÖ Stored document: {test_key}\")\n        print(f\"   ETag: {result['etag'][:8]}...\")\n        print(f\"   Size: {result['size']} bytes\")\n        \n        # Retrieve and verify\n        retrieved = storage.get_object(test_key)\n        if retrieved[\"data\"].decode('utf-8') == text_content:\n            print(\"‚úÖ Document retrieval verified\")\n        else:\n            print(\"‚ùå Document content mismatch\")\n            return False\n        \n        # Store JSON config\n        config_key = f\"{test_prefix}/config.json\"\n        config_data = {\n            \"test_id\": test_prefix,\n            \"created_at\": datetime.now(timezone.utc).isoformat(),\n            \"settings\": {\n                \"feature_flags\": [\"f4r2\", \"object_storage\", \"manifests\", \"search\"],\n                \"test_mode\": True\n            }\n        }\n        \n        json_result = storage.put_json(config_key, config_data)\n        test_keys.append(config_key)\n        print(f\"‚úÖ Stored JSON config: {config_key}\")\n        \n        # Retrieve and verify JSON\n        json_retrieved = storage.get_json(config_key)\n        if json_retrieved[\"json_data\"][\"test_id\"] == test_prefix:\n            print(\"‚úÖ JSON retrieval verified\")\n        else:\n            print(\"‚ùå JSON content mismatch\")\n            return False\n        \n        # Test 2: Document Storage with SHA256\n        print(\"\\nüîê Test 2: Document Storage (SHA256)\")\n        print(\"-\" * 30)\n        \n        sample_doc = f\"Sample document for SHA256 testing - {test_prefix}\".encode('utf-8')\n        doc_result = storage.store_document(\n            data=sample_doc,\n            filename=\"sample.txt\",\n            content_type=\"text/plain\"\n        )\n        \n        expected_sha256 = hashlib.sha256(sample_doc).hexdigest()\n        test_keys.append(doc_result[\"key\"])\n        \n        print(f\"‚úÖ Document stored: {doc_result['key']}\")\n        print(f\"   SHA256: {doc_result['sha256']}\")\n        print(f\"   Already existed: {doc_result['already_exists']}\")\n        \n        if doc_result[\"sha256\"] == expected_sha256:\n            print(\"‚úÖ SHA256 verification passed\")\n        else:\n            print(\"‚ùå SHA256 mismatch\")\n            return False\n        \n        # Test 3: JSONL Manifests\n        print(\"\\nüìù Test 3: JSONL Manifests\")\n        print(\"-\" * 30)\n        \n        # Add multiple entries\n        test_entries = [\n            {\n                \"type\": \"expense\",\n                \"amount\": 25.50,\n                \"merchant\": \"Test Coffee Shop\",\n                \"category\": \"Food & Drink\",\n                \"description\": f\"Test expense 1 - {test_prefix}\"\n            },\n            {\n                \"type\": \"expense\",\n                \"amount\": 150.00,\n                \"merchant\": \"Test Conference\", \n                \"category\": \"Education\",\n                \"description\": f\"Test expense 2 - {test_prefix}\"\n            },\n            {\n                \"type\": \"income\",\n                \"amount\": 2000.00,\n                \"source\": \"Test Client\",\n                \"category\": \"Consulting\",\n                \"description\": f\"Test income - {test_prefix}\"\n            }\n        ]\n        \n        manifest_key = f\"manifests/{test_prefix}/test_data-{test_user_id}.jsonl\"\n        test_keys.append(manifest_key)\n        \n        for i, entry in enumerate(test_entries, 1):\n            result = manifests.append_jsonl(\n                module=test_prefix,\n                name=\"test_data\",\n                entry=entry,\n                user_id=test_user_id\n            )\n            print(f\"‚úÖ Added entry {i}: {entry['description'][:30]}...\")\n            print(f\"   Entry ID: {result['entry_id']}\")\n            print(f\"   Attempt: {result['attempt']}\")\n        \n        # Read back entries\n        entries = list(manifests.read_jsonl(\n            module=test_prefix,\n            name=\"test_data\",\n            user_id=test_user_id\n        ))\n        \n        if len(entries) == len(test_entries):\n            print(f\"‚úÖ Read back {len(entries)} entries\")\n            total_amount = sum(e.data.get('amount', 0) for e in entries)\n            print(f\"   Total amount: ${total_amount:.2f}\")\n        else:\n            print(f\"‚ùå Entry count mismatch: expected {len(test_entries)}, got {len(entries)}\")\n            return False\n        \n        # Test 4: Parquet Manifests (if available)\n        print(\"\\nüìä Test 4: Parquet Manifests\")\n        print(\"-\" * 30)\n        \n        # Generate transaction data\n        transactions = []\n        for i in range(10):\n            transactions.append({\n                \"transaction_id\": f\"TXN_{test_prefix}_{i:03d}\",\n                \"date\": f\"2025-01-{(i % 28) + 1:02d}\",\n                \"amount\": round(50.0 + (i * 25.5), 2),\n                \"merchant\": f\"Test Merchant {i % 3 + 1}\",\n                \"category\": [\"Food\", \"Travel\", \"Equipment\"][i % 3],\n                \"test_id\": test_prefix\n            })\n        \n        try:\n            parquet_result = manifests.write_parquet(\n                module=test_prefix,\n                name=\"transactions\",\n                data=transactions,\n                partition=\"2025-01\",\n                user_id=test_user_id\n            )\n            \n            parquet_key = parquet_result[\"key\"]\n            test_keys.append(parquet_key)\n            \n            print(f\"‚úÖ Stored {parquet_result['records']} transactions\")\n            print(f\"   Format: {parquet_result['format']}\")\n            print(f\"   Key: {parquet_key}\")\n            \n            # Read back data\n            read_data = manifests.read_parquet(\n                module=test_prefix,\n                name=\"transactions\",\n                partition=\"2025-01\",\n                user_id=test_user_id\n            )\n            \n            if len(read_data) == len(transactions):\n                print(f\"‚úÖ Read back {len(read_data)} transactions\")\n                total = sum(t['amount'] for t in read_data)\n                print(f\"   Total amount: ${total:.2f}\")\n            else:\n                print(f\"‚ùå Transaction count mismatch\")\n                return False\n                \n        except Exception as e:\n            print(f\"‚ö†Ô∏è  Parquet test failed: {e}\")\n            print(\"   This might be expected if PyArrow is not available\")\n        \n        # Test 5: Search Index\n        print(\"\\nüîç Test 5: Search Index\")\n        print(\"-\" * 30)\n        \n        # Index test documents\n        test_documents = [\n            {\n                \"id\": f\"{test_prefix}_doc1\",\n                \"content\": f\"Coffee shop receipt from test integration {test_prefix}\",\n                \"merchant\": \"Test Coffee Shop\",\n                \"metadata\": {\"amount\": 25.50, \"category\": \"Food\"}\n            },\n            {\n                \"id\": f\"{test_prefix}_doc2\",\n                \"content\": f\"Conference registration receipt for testing {test_prefix}\",\n                \"merchant\": \"Test Conference Ltd\",\n                \"metadata\": {\"amount\": 150.00, \"category\": \"Education\"}\n            },\n            {\n                \"id\": f\"{test_prefix}_doc3\",\n                \"content\": f\"Equipment purchase laptop and accessories {test_prefix}\",\n                \"merchant\": \"Tech Store\",\n                \"metadata\": {\"amount\": 2000.00, \"category\": \"Equipment\"}\n            }\n        ]\n        \n        search_key = f\"manifests/{test_prefix}/search_index-{test_user_id}.json\"\n        test_keys.append(search_key)\n        \n        for doc in test_documents:\n            result = search.add_document(\n                module=test_prefix,\n                document_id=doc[\"id\"],\n                text_content=doc[\"content\"],\n                metadata=doc[\"metadata\"],\n                merchant=doc[\"merchant\"],\n                user_id=test_user_id\n            )\n            print(f\"‚úÖ Indexed: {doc['id']} ({result['words_indexed']} words)\")\n        \n        # Test keyword search\n        search_tests = [\n            ([\"coffee\", \"shop\"], \"AND\"),\n            ([\"conference\", \"equipment\"], \"OR\"),\n            ([\"receipt\"], \"AND\"),\n            ([\"testing\", test_prefix], \"AND\")\n        ]\n        \n        for keywords, operator in search_tests:\n            results = search.search_keywords(\n                module=test_prefix,\n                keywords=keywords,\n                user_id=test_user_id,\n                operator=operator\n            )\n            print(f\"‚úÖ Search '{' '.join(keywords)}' ({operator}): {len(results)} results\")\n        \n        # Test merchant search\n        merchant_results = search.search_merchants(\n            module=test_prefix,\n            merchant_query=\"coffee\",\n            user_id=test_user_id\n        )\n        print(f\"‚úÖ Merchant search 'coffee': {len(merchant_results)} results\")\n        \n        # Get search statistics\n        search_stats = search.get_index_stats(test_prefix, test_user_id)\n        if search_stats[\"available\"]:\n            stats = search_stats[\"stats\"]\n            print(f\"‚úÖ Search stats: {stats['total_documents']} docs, {stats['total_terms']} terms\")\n        \n        # Test 6: Listing and Statistics\n        print(\"\\nüìä Test 6: Statistics and Listings\")\n        print(\"-\" * 30)\n        \n        # List objects with prefix\n        objects = storage.list_objects(prefix=test_prefix, max_keys=20)\n        print(f\"‚úÖ Found {len(objects['objects'])} test objects\")\n        \n        # Storage statistics\n        storage_stats = storage.get_storage_stats()\n        if storage_stats[\"available\"]:\n            print(f\"‚úÖ Total objects in bucket: {storage_stats['objects']['total']}\")\n            print(f\"   Total size: {storage_stats['sizes']['total_bytes']:,} bytes\")\n        \n        # Manifest statistics\n        manifest_stats = manifests.get_manifest_stats()\n        if manifest_stats[\"available\"]:\n            print(f\"‚úÖ Total manifests: {manifest_stats['total_manifests']}\")\n        \n        print(\"\\nüéâ All F4R2 integration tests passed!\")\n        \n    except Exception as e:\n        print(f\"\\n‚ùå Integration test failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n    \n    finally:\n        # Cleanup if requested\n        if cleanup and test_keys:\n            print(\"\\nüßπ Cleaning up test data...\")\n            cleanup_count = 0\n            \n            for key in test_keys:\n                try:\n                    if storage.object_exists(key):\n                        storage.delete_object(key)\n                        cleanup_count += 1\n                        print(f\"   üóëÔ∏è  Deleted: {key}\")\n                except Exception as e:\n                    print(f\"   ‚ö†Ô∏è  Failed to delete {key}: {e}\")\n            \n            print(f\"‚úÖ Cleaned up {cleanup_count} test objects\")\n        elif test_keys:\n            print(f\"\\nüí° Test objects created (use --cleanup to remove):\")\n            for key in test_keys[:5]:  # Show first 5\n                print(f\"   - {key}\")\n            if len(test_keys) > 5:\n                print(f\"   ... and {len(test_keys) - 5} more\")\n    \n    return True\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"F4R2 Integration Test\",\n        formatter_class=argparse.RawDescriptionHelpFormatter\n    )\n    parser.add_argument(\n        \"--cleanup\",\n        action=\"store_true\",\n        help=\"Remove test data after completion\"\n    )\n    \n    args = parser.parse_args()\n    \n    try:\n        success = run_integration_test(cleanup=args.cleanup)\n        \n        if success:\n            print(\"\\n‚úÖ F4R2 Integration Test: PASSED\")\n            print(\"üöÄ F4R2 is ready for production use!\")\n            return 0\n        else:\n            print(\"\\n‚ùå F4R2 Integration Test: FAILED\")\n            print(\"üîß Check configuration and connectivity\")\n            return 1\n            \n    except KeyboardInterrupt:\n        print(\"\\n\\n‚èπÔ∏è  Test interrupted by user\")\n        return 130\n    except Exception as e:\n        print(f\"\\nüí• Unexpected error: {e}\")\n        return 2\n\nif __name__ == \"__main__\":\n    exit_code = main()\n    sys.exit(exit_code)\n