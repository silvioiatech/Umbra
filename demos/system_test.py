#!/usr/bin/env python3
"""
UMBRA System Status Check
========================

Test the current implementation and identify what needs attention.
"""

import sys
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_core_imports():
    """Test if core modules can be imported."""
    print("üîç Testing Core Imports...")
    
    try:
        from umbra.core.config import config
        print("   ‚úÖ Config module imported")
        
        from umbra.core.logger import get_context_logger
        print("   ‚úÖ Logger module imported")
        
        from umbra.core.permissions import PermissionManager
        print("   ‚úÖ Permissions module imported")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Core import error: {e}")
        return False

def test_bot_modules():
    """Test bot-related modules."""
    print("\nü§ñ Testing Bot Modules...")
    
    try:
        from umbra.bot import UmbraBot
        print("   ‚úÖ Bot module imported")
        
        from umbra.router import UmbraRouter
        print("   ‚úÖ Router module imported")
        
        from umbra.modules.registry import ModuleRegistry
        print("   ‚úÖ Module registry imported")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Bot module error: {e}")
        return False

def test_ai_modules():
    """Test AI-related modules."""
    print("\nüß† Testing AI Modules (F3R1)...")
    
    try:
        from umbra.ai.agent import UmbraAIAgent
        print("   ‚úÖ AI agent imported")
        
        from umbra.providers.openrouter import OpenRouterProvider
        print("   ‚úÖ OpenRouter provider imported")
        
        return True
    except Exception as e:
        print(f"   ‚ùå AI module error: {e}")
        return False

def test_storage_modules():
    """Test storage-related modules."""
    print("\nüì¶ Testing Storage Modules (F4R2)...")
    
    try:
        from umbra.storage.r2_client import R2Client
        print("   ‚úÖ R2 client imported")
        
        from umbra.storage.objects import ObjectStorage
        print("   ‚úÖ Object storage imported")
        
        from umbra.storage.manifest import ManifestManager
        print("   ‚úÖ Manifest manager imported")
        
        from umbra.storage.search_index import SearchIndex
        print("   ‚úÖ Search index imported")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Storage module error: {e}")
        return False

def test_mcp_modules():
    """Test MCP modules."""
    print("\nüõ†Ô∏è Testing MCP Modules...")
    
    modules_tested = 0
    modules_working = 0
    
    module_list = [
        "general_chat_mcp",
        "business_mcp", 
        "concierge_mcp",
        "creator_mcp",
        "finance_mcp",
        "production_mcp"
    ]
    
    for module_name in module_list:
        try:
            module = __import__(f"umbra.modules.{module_name}", fromlist=[module_name])
            print(f"   ‚úÖ {module_name} imported")
            modules_working += 1
        except Exception as e:
            print(f"   ‚ö†Ô∏è {module_name} error: {e}")
        modules_tested += 1
    
    print(f"   üìä MCP Modules: {modules_working}/{modules_tested} working")
    return modules_working > 0

def test_configuration():
    """Test configuration."""
    print("\n‚öôÔ∏è Testing Configuration...")
    
    try:
        from umbra.core.config import config
        
        status = config.get_status_summary()
        print(f"   üìã Environment: {status['environment']}")
        print(f"   üåç Locale: {status['locale_tz']}")
        print(f"   üîí Privacy: {status['privacy_mode']}")
        print(f"   ü§ñ Bot Token: {status['bot_token']}")
        print(f"   üë• Allowed Users: {status['allowed_users']}")
        print(f"   üëë Admin Users: {status['admin_users']}")
        print(f"   üß† AI Integration: {status['ai_integration']}")
        print(f"   üì¶ R2 Storage: {status['r2_storage']}")
        print(f"   üóÑÔ∏è Storage Backend: {status['storage_backend']}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Configuration error: {e}")
        return False

def test_basic_functionality():
    """Test basic functionality."""
    print("\nüß™ Testing Basic Functionality...")
    
    try:
        # Test router
        from umbra.router import UmbraRouter
        router = UmbraRouter()
        
        # Test route patterns
        result = router.route_message("help", user_id=123456789, is_admin=True)
        print(f"   ‚úÖ Router working: matched={result.matched}")
        
        # Test general chat
        from umbra.modules.general_chat_mcp import GeneralChatMCP
        chat = GeneralChatMCP()
        
        # Test calculator
        import asyncio
        calc_result = asyncio.run(chat.execute("calculate", {"expression": "2+2"}))
        print(f"   ‚úÖ Calculator working: {calc_result.get('success', False)}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Basic functionality error: {e}")
        return False

def identify_next_steps():
    """Identify what needs to be done next."""
    print("\nüéØ Next Steps Analysis...")
    
    next_steps = []
    
    # Check if bot token is set
    if os.getenv("TELEGRAM_BOT_TOKEN") == "your_bot_token_here":
        next_steps.append("1. Set real TELEGRAM_BOT_TOKEN in .env file")
    
    # Check if user IDs are set
    if os.getenv("ALLOWED_USER_IDS") == "123456789":
        next_steps.append("2. Set real ALLOWED_USER_IDS in .env file")
    
    # Check if OpenRouter is configured
    if not os.getenv("OPENROUTER_API_KEY"):
        next_steps.append("3. (Optional) Set OPENROUTER_API_KEY for AI features")
    
    # Check if R2 is configured
    if not os.getenv("R2_ACCOUNT_ID"):
        next_steps.append("4. (Optional) Set R2 credentials for cloud storage")
    
    if next_steps:
        print("   üìù Required Configuration:")
        for step in next_steps:
            print(f"   {step}")
    else:
        print("   ‚úÖ All basic configuration appears to be set!")
    
    print("\n   üí° Once configured, you can:")
    print("   ‚Ä¢ Run: python main.py")
    print("   ‚Ä¢ Test: python f4r2_validate.py")
    print("   ‚Ä¢ Validate: python f4r2_demo.py")

def main():
    """Main test function."""
    print("üöÄ UMBRA System Status Check")
    print("=" * 50)
    
    # Run all tests
    tests = [
        test_core_imports,
        test_bot_modules,
        test_ai_modules,
        test_storage_modules,
        test_mcp_modules,
        test_configuration,
        test_basic_functionality
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"   üí• Test {test_func.__name__} crashed: {e}")
    
    # Summary
    print(f"\nüìä Test Results: {passed}/{total} test groups passed")
    
    if passed == total:
        print("üéâ All systems working! UMBRA is ready for configuration.")
    elif passed >= total * 0.8:
        print("‚úÖ Most systems working! Minor issues detected.")
    elif passed >= total * 0.5:
        print("‚ö†Ô∏è Some systems working, but issues detected.")
    else:
        print("‚ùå Major issues detected. Check imports and dependencies.")
    
    # Identify next steps
    identify_next_steps()
    
    return 0 if passed >= total * 0.8 else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrupted by user")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        sys.exit(2)
